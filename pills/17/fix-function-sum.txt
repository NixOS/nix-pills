# Our old friend `sum`
nix-repl> sum = a: b: a + b

# Our new friend `fix`
nix-repl> fix = f: let f result; in result

# Helper function that forces the "fixed" function to recurse over its arguments __one argument at a time__ in each recursion
nix-repl> const = a: b: a

# Now use `fix` and `const` to turn `sum` into functions that evaluate one argument at a time:
nix-repl> sum_0 = fix (const (sum))     # `sum_0` => a: b: a + b
nix-repl> sum_1 = sum_0 1               # `sum_1` => b: 1 + b
nix-repl> sum_1 2                       # => 1 + 2
3
