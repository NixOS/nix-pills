<chapter xmlns="http://docbook.org/ns/docbook"
xmlns:xlink="http://www.w3.org/1999/xlink"
xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0"
xml:id="functions-and-imports">

<title>Functions and Imports</title>

  <para>
    Welcome to the fifth Nix pill. In the previous <link
    linkend="basics-of-language">fourth pill</link> we touched the Nix language
    for a moment. We introduced basic types and values of the Nix language, and
    basic expressions such as
    <code>if</code>, <code>with</code> and
    <code>let</code>. I invite you to re-read about these expressions and play
    with them in the repl.
  </para>

  <para>
    Functions help to build reusable components in a big repository like
    <link xlink:href="https://github.com/NixOS/nixpkgs/">nixpkgs</link>. The Nix
    manual has a <link
    xlink:href="https://nixos.org/manual/nix/stable/expressions/language-constructs.html#functions">great explanation of
    functions</link>. Let's go: pill on one hand, Nix manual on the other hand.
  </para>

  <para>
    I remind you how to enter the Nix environment: <code>source
    ~/.nix-profile/etc/profile.d/nix.sh</code>
  </para>

<section>
  <title>Nameless and single parameter</title>

  <para>
    Functions are anonymous (lambdas), and only have a single parameter. The
    syntax is extremely simple. Type the parameter name, then "<code>:</code>",
    then the body of the function.
  </para>

  <screen>nix-repl&gt; x: x*2
«lambda»</screen>

  <para>
    So here we defined a function that takes a parameter
    <code>x</code>, and returns <code>x*2</code>. The problem is that we cannot
    use it in any way, because it's unnamed... joke!
  </para>

  <para>
    We can store functions in variables.
  </para>

  <screen>nix-repl&gt; double = x: x*2
nix-repl&gt; double
«lambda»
nix-repl&gt; double 3
6</screen>

  <para>
    As usual, please ignore the special syntax for assignments inside <literal>nix repl</literal>.
    So, we defined a function <code>x: x*2</code> that takes one parameter
    <code>x</code>, and returns
    <code>x*2</code>. This function is then assigned to the variable
    <code>double</code>. Finally we did our first function call: <code>double
    3</code>.
  </para>

  <para>
    <emphasis role="underline">Big note:</emphasis> it's not like many other
    programming languages where you write
    <code>double(3)</code>. It really is <code>double 3</code>.
  </para>

  <para>
    In summary: to call a function, name the variable, then space, then the
    argument. Nothing else to say, it's as easy as that.
  </para>
</section>

<section>
  <title>More than one parameter</title>

  <para>
    How do we create a function that accepts more than one parameter? For people
    not used to functional programming, this may take a while to grasp. Let's do
    it step by step.
  </para>

  <screen>nix-repl&gt; mul = a: (b: a*b)
nix-repl&gt; mul
«lambda»
nix-repl&gt; mul 3
«lambda»
nix-repl&gt; (mul 3) 4
12</screen>

  <para>
    We defined a function that takes the parameter <code>a</code>, the body
    returns another function. This other function takes a parameter
    <code>b</code> and returns <code>a*b</code>. Therefore, calling <code>mul
    3</code> returns this kind of function: <code>b: 3*b</code>. In turn, we
    call the returned function with <code>4</code>, and get the expected result.
  </para>

  <para>
    You don't have to use parentheses at all, Nix has sane priorities when
    parsing the code:
  </para>

  <screen>nix-repl&gt; mul = a: b: a*b
nix-repl&gt; mul
«lambda»
nix-repl&gt; mul 3
«lambda»
nix-repl&gt; mul 3 4
12
nix-repl&gt; mul (6+7) (8+9)
221</screen>

  <para>
    Much more readable, you don't even notice that functions only receive one
    argument. Since the argument is separated by a space, to pass more complex
    expressions you need parentheses. In other common languages you would write
    <code>mul(6+7, 8+9)</code>.
  </para>

  <para>
    Given that functions have only one parameter, it is straightforward to use
    <emphasis role="strong">partial application</emphasis>:
  </para>

  <screen>nix-repl&gt; foo = mul 3
nix-repl&gt; foo 4
12
nix-repl&gt; foo 5
15</screen>

  <para>
    We stored the function returned by <code>mul 3</code> into a variable foo,
    then reused it.
  </para>
</section>

<section>
  <title>Argument set</title>

  <para>
    Now this is a very cool feature of Nix. It is possible to pattern match over
    a set in the parameter. We write an alternative version of <code>mul = a: b:
    a*b</code> first by using a set as argument, then using pattern matching.
  </para>

  <screen>nix-repl&gt; mul = s: s.a*s.b
nix-repl&gt; mul { a = 3; b = 4; }
12
nix-repl&gt; mul = { a, b }: a*b
nix-repl&gt; mul { a = 3; b = 4; }
12</screen>

  <para>
    In the first case we defined a function that accepts a single parameter. We
    then access attributes <code>a</code> and
    <code>b</code> from the given set. Note how the parentheses-less syntax for
    function calls is very elegant in this case, instead of doing <code>mul({
    a=3; b=4; })</code> in other languages.
  </para>

  <para>
    In the second case we defined an argument set. It's like defining a set,
    except without values. We require that the passed set contains the keys
    <code>a</code> and <code>b</code>. Then we can use those <code>a</code> and
    <code>b</code> in the function body directly.
  </para>

  <screen>nix-repl&gt; mul = { a, b }: a*b
nix-repl&gt; mul { a = 3; b = 4; c = 6; }
error: anonymous function at (string):1:2 called with unexpected argument `c', at (string):1:1
nix-repl&gt; mul { a = 3; }
error: anonymous function at (string):1:2 called without required argument `b', at (string):1:1</screen>

  <para>
    Only a set with exactly the attributes required by the function is accepted,
    nothing more, nothing less.
  </para>
</section>

<section>
  <title>Default and variadic attributes</title>

  <para>
    It is possible to specify <emphasis role="strong">default values</emphasis>
    of attributes in the argument set:
  </para>

  <screen>nix-repl&gt; mul = { a, b ? 2 }: a*b
nix-repl&gt; mul { a = 3; }
6
nix-repl&gt; mul { a = 3; b = 4; }
12</screen>

  <para>
    Also you can allow passing more attributes (<emphasis
    role="strong">variadic</emphasis>) than the expected ones:
  </para>

  <screen>nix-repl&gt; mul = { a, b, ... }: a*b
nix-repl&gt; mul { a = 3; b = 4; c = 2; }</screen>

  <para>
    However, in the function body you cannot access the "c" attribute. The
    solution is to give a name to the given set with the <emphasis
    role="strong">@-pattern</emphasis>:
  </para>

  <screen>nix-repl&gt; mul = s@{ a, b, ... }: a*b*s.c
nix-repl&gt; mul { a = 3; b = 4; c = 2; }
24</screen>

  <para>
    That's it, you give a name to the whole parameter with name@ before the set
    pattern.
  </para>

  <para>
    Advantages of using argument sets:
  </para>

  <itemizedlist mark='bullet'>
    <listitem>
      <para>
        Named unordered arguments: you don't have to remember the order of the
        arguments.
      </para>
    </listitem>
    <listitem>
      <para>
        You can pass sets, that adds a whole new layer of flexibility and
        convenience.
      </para>
    </listitem>
  </itemizedlist>

  <para>
    Disadvantages:
  </para>

  <itemizedlist mark='bullet'>
    <listitem>
      <para>
        Partial application does not work with argument sets. You have to
        specify the whole attribute set, not part of it.
      </para>
    </listitem>
  </itemizedlist>

  <para>
    You may find similarities with <link
    xlink:href="https://docs.python.org/3/faq/programming.html#how-can-i-pass-optional-or-keyword-parameters-from-one-function-to-another">Python
    **kwargs</link>.
  </para>
</section>

<section>
  <title>Imports</title>

  <para>
    The <code>import</code> function is built-in and provides a way to parse a
    <filename>.nix</filename> file. The natural approach is to define each
    component in a <filename>.nix</filename> file, then compose by importing
    these files.
  </para>

  <para>
    Let's start with the bare metal.
  </para>

  <para>
    <filename>a.nix</filename>:
  </para>

  <programlisting>3</programlisting>

  <para>
    <filename>b.nix</filename>:
  </para>

  <programlisting>4</programlisting>

  <para>
    <filename>mul.nix</filename>:
  </para>

  <programlisting>a: b: a*b</programlisting>

  <screen>nix-repl&gt; a = import ./a.nix
nix-repl&gt; b = import ./b.nix
nix-repl&gt; mul = import ./mul.nix
nix-repl&gt; mul a b
12</screen>

  <para>
    Yes it's really that simple. You import a file, and it gets parsed as an
    expression. Note that the scope of the imported file does not inherit the
    scope of the importer.
  </para>

  <para>
    <filename>test.nix</filename>:
  </para>

  <programlisting>x</programlisting>

  <screen>nix-repl&gt; let x = 5; in import ./test.nix
error: undefined variable `x' at /home/lethal/test.nix:1:1</screen>

  <para>
    So how do we pass information to the module? Use functions, like we did with
    <filename>mul.nix</filename>. A more complex example:
  </para>

  <para>
    <filename>test.nix</filename>:
  </para>

  <programlisting>{ a, b ? 3, trueMsg ? "yes", falseMsg ? "no" }:
if a &gt; b
  then builtins.trace trueMsg true
  else builtins.trace falseMsg false
</programlisting>

  <screen>nix-repl&gt; import ./test.nix { a = 5; trueMsg = "ok"; }
trace: ok
true
</screen>


  <para>
    Explaining:
  </para>

  <itemizedlist mark='bullet'>
    <listitem>
      <para>
        In <filename>test.nix</filename> we return a function. It accepts a set,
        with default attributes
        <code>b</code>, <code>trueMsg</code> and
        <code>falseMsg</code>.
      </para>
    </listitem>
    <listitem>
      <para>
        <code>builtins.trace</code> is a <link
        xlink:href="https://nixos.org/manual/nix/stable/expressions/builtins.html">built-in
        function</link> that takes two arguments. The first is the message to
        display, the second is the value to return. It's usually used for
        debugging purposes.
      </para>
    </listitem>
    <listitem>
      <para>
        Then we import <filename>test.nix</filename>, and call the function with
        that set.
      </para>
    </listitem>
  </itemizedlist>

  <para>
    So when is the message shown? Only when it needs to be evaluated.
  </para>
</section>

<section>
  <title>Next pill</title>

  <para>
    ...we will finally write our first derivation.
  </para>
</section>

</chapter>
